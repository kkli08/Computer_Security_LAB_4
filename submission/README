#Ke Li, 1005842554, damian.li@mail.utoronto.ca

Part1:
    1. In order to find the IPv4 address for utoronto,ca, I use: dig utoronto.ca
    2. In order to find the name of the name server with their IP address, I use: dig utoronto.ca NS
    3. In order to find the names of the mail server with their IP address, 
        I use:
        dig utoronto.ca MX
        and then:
        dig utoronto-ca.mail.protection.outlook.com
    4. the output matches the the result.
        I use: 
        dig @127.0.0.1 -p <NAMED port number> <args>
        
Part2:
    run command:
    python2 dnsproxy_starter.py --port <DNS proxy port> --dns_port <BIND port> 
    check using dig:
    dig @127.0.0.1 -p <DNS proxy port> example.com

    socket programming in python, establish the connection and when user try to use
    dig to execute a dns query at localhost, it send to my dns proxy port, after the 
    proxy receive the data, forward it to the real local dns server, and get response
    from the dns server. Finally, send back what dns server send back to the proxy to 
    the user.

Part3:
    run command:
    python2 dnsproxy_starter.py --port <DNS proxy port> --dns_port <BIND port> --spoof_response
    check using dig:
    dig @127.0.0.1 -p <DNS proxy port> example.com

    when the proxy comes to spoof attck mode, I use scapy to modified the packet send back
    from the dns server. when the qname == 'example.com.', modified the packet information
    by reconstructing with rdata='1.2.3.4', change its name servers rdata='ns.dnslabattacker.net.'

Part4:
    dig command that I used:
    ./part4_starter.py --ip 128.100.8.62 --port <local dns server port> --dns_port <> --query_port 33333
    
    follow the instructions on lab4 handout,
    firstly set up the socket connection and init the dns packet for 'example.com', it will be used after we flood the server
    and then query the bind server for a non-existing name, since the mapping is not available in the BIND server cache, it wills
    send out a DNS query to the name server of the example.com domain.
    when the BIND server waits for the reply from the name server, flood it with different transaction ID, genertated randomly
    the script will repeatly run until it successfully posioned the BIND DNS cache.


    


Reference:

Python Socket Connection:
https://realpython.com/python-sockets/

How to modify packet using Scapy:
https://www.usna.edu/Users/cs/choi/it432/lec/l06/lec.html

How DNS work:
https://www.youtube.com/watch?v=mpQZVYPuDGU

DNS Record Explain:
https://www.youtube.com/watch?v=HnUDtycXSNE